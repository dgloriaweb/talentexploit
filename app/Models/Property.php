<?php

namespace App\Models;

use Exception;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class Property extends Model
{
    protected $table = 'properties';
    protected $primaryKey = 'id';



    /**   relationships   **/

    /**
     * A property belongs to one person
     */
    public function person()
    {
        return $this->belongsTo(Person::class);
    }

    /**
     * A property belongs to one drivers license
     */
    public function driversLicense()
    {
        return $this->belongsTo(Driver::class, 'prop_link_id');
    }

    /**
     * A property belongs to one skill
     */
    public function skill()
    {
        return $this->belongsTo(Skill::class, 'prop_link_id');
    }

    //*** functions */
    // v1
    public static function getPersonSkills_v1($userId)
    {
        $query = DB::select("select 
        users.id as id, person_id, prop_link_id, prop_link_type, driving_years, langlevel_id, sector_years, skills.id as skill_id, skill, skill_type
        from `properties`
        left join people
        on people.id = properties.person_id
        left join users	
        on users.id = people.user_id
        left join skills
        on skills.id = prop_link_id
        where users.id = " . $userId . "
        and prop_link_type = 'skill';");

        return $query;
    }
    // v2
    public static function getPersonSkills($userId)
    {
        $query = DB::select("select 
        skills.id as id, skill, core_skill
        from `properties`
        left join people
        on people.id = properties.person_id
        left join users	
        on users.id = people.user_id
        left join skills
        on skills.id = prop_link_id
        left join skills_core_skills_link
        on skills.id = skills_core_skills_link.skill_id
    	left join core_skills
	    on skills_core_skills_link.core_skill_id = core_skills.id
        where users.id = " . $userId . "
        and prop_link_type = 'skill';");

        return $query;
    }

    public static function addPersonSkill($personId, $skillIdArray)
    {
        // if userSkills is empty, still need to handle empty array
  


        // receive array of skill id's
        $myArray = explode(',', $skillIdArray);

        // get all the skills from the database
        $haystack2 =  DB::select("select * FROM `properties` WHERE prop_link_type='skill' and person_id = " . $personId);
        foreach ($haystack2 as $key => $dbRow) {
            if (in_array($dbRow->prop_link_id, $myArray))
            // if there is a match, remove item from the incoming data array
            // if there is a full match, the array should run out
            {
                unset($myArray[$key]);
            } else {
                // if the database row is not in the needle, delete it
                DB::delete("DELETE FROM `properties` WHERE `person_id`= " . $personId . " AND `prop_link_id` = " . $dbRow->prop_link_id);
            }
        }
        // if anything remained in the incoming list, add it
        foreach ($myArray as $key => $skillId) {
            DB::insert("INSERT INTO `properties`( `person_id`, `prop_link_id`, `prop_link_type`) VALUES (" . $personId . ", " . $skillId . ",'skill')");
        }

        return true;
    }
}
