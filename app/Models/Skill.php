<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class Skill extends Model
{
  use HasFactory;
  protected $table = 'skills';
  protected $primaryKey = 'id';

  /**   relationships   **/

  /**
   * A skill has many properties
   */
  public function properties()
  {
    return $this->hasMany(Property::class, 'id')
      ->where('prop_link_type', '==', 'skill');
  }
  //*** functions */
  public static function getSkillsGrouped($userId)
  {
    // get an array of integers of the skill ids that the user already has
    $personSkills = Property::getPersonSkills($userId);

    $skillsarray = [];
    foreach ($personSkills as $item) {
      array_push($skillsarray, $item->id);
    }
    $skillsarray = implode(",", $skillsarray);
    $myArray = null;
    $coreSkills = DB::select("select * from core_skills;");

    // need to pass something to sql even if there are no skills selected 
    if (!$skillsarray) $skillsarray = 0;

    // remove users skills from this list
    foreach ($coreSkills as $coreskill) {
      $core_skillId = $coreskill->id;
      $core_skillName = $coreskill->core_skill;
      $query = "select 
      skills.id as skill_id, 
      skills.skill as skill, 
      core_skills.core_skill as core_skill 
      FROM `skills` 
      Left Join skills_core_skills_link 
      on skills.id = skills_core_skills_link.skill_id 
      Left join core_skills 
      on core_skills.id = skills_core_skills_link.core_skill_id 
      where skill_type = 'job_type'
      AND skills.id NOT IN (" . $skillsarray . ")
      AND core_skills.id = '" . $core_skillId . "'
      order by core_skill";

      $skills = DB::select($query);
      foreach ($skills as $skill) {
        $myArray[$core_skillName][] =
          [
            "id" => $skill->skill_id,
            "skill" => $skill->skill
          ];
      }
    }


    return $myArray;
  }
}
