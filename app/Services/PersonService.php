<?php

namespace App\Services;

use App\Models\Person;
use Exception;

class PersonService
{
    protected $person;

    public function __construct(Person $person)
    {
        $this->person = $person;
        $this->dayCases =  [
            'sd1' =>    '00001',
            'sd2' =>    '00010',
            'sd3' =>    '00100',
            'sd4' =>    '00110',
            'sd5' =>    '01000',
            'sd6' =>    '01010',
            'sd7' =>    '10000',
            'sd8' =>    '10010',
            'sd9' =>    '10100',
            'sd10' =>   '11000',
            'sd11' =>   '11010',
            'sd12' =>   '10110',
            'sd13' =>   '11100',
            'sd14' =>   '11110',
            'sd15' =>   '01100'
        ];
        $this->hourCases = [
            // normal_hours
            'sh1' => '10000',
            // normal + nightshift
            'sh2' => '11000',
            // normal + other_shift
            'sh3' => '10010',
            // normal + ns + os
            'sh4' => '11010',
            // nightshift_only
            'sh5' => '01100',
            // other_shift_only
            'sh6' => '00011',
            // nightshift + other_shift
            'sh7' => '01010',
        ];
    }


    /**
     * Build and return the code for persons work preferences hours settings
     * returns a five digit string like 10100
     *
     * @return string
     */
    public  function getPersonWorkPrefHourSettings()
    {

        // build above setup from current database values
        $hu1 = $this->person['normal_hours'];
        $hu2 = $this->person['nightshift'];
        $hu3 = $this->person['nightshift_only'];
        $hu4 = $this->person['other_shift'];
        $hu5 = $this->person['other_shift_only'];

        return $hu1 . $hu2 . $hu3 . $hu4 . $hu5;
    }

    /**
     * Build and return the code for persons work preferences days settings
     * returns a five digit string like 10100
     *
     * @param [int] $personId
     * @return string
     */
    public  function getPersonWorkPrefDaySettings()
    {

        // build above setup from current database values
        $du1 = $this->person['workdays'];
        $du2 = $this->person['saturday'];
        $du3 = $this->person['sunday'];
        $du4 = $this->person['bank_holidays'];
        $du5 = $this->person['sat_sun_bh_only'];

        return $du1 . $du2 . $du3 . $du4 . $du5;
    }

    public  function getPersonWorkPrefHourCode($workPrefHourCase)
    {
        //get code from the associative table
        return WorkPreferenceService::workPrefSelectionCasesHours($workPrefHourCase);
    }
    public  function getPersonWorkPrefDayCode($workPrefDayCase)
    {
        //get code from the associative table
        return WorkPreferenceService::workPrefSelectionCasesDays($workPrefDayCase);
    }

    public  function getWorkprefsById($personId)
    {
        $existingUser = Person::getPersonById($personId);
        if ($existingUser) {
            //setup this->workprefs array with the real user data
            $workprefsArray = [
                'id' => $existingUser->id,
                'workplace' => $existingUser->workplace,
                'remote' => $existingUser->remote,
                'workdays' => $existingUser->workdays,
                'saturday' => $existingUser->saturday,
                'sunday' => $existingUser->sunday,
                'bank_holidays' => $existingUser->bank_holidays,
                'sat_sun_bh_only' => $existingUser->sat_sun_bh_only,
                'normal_hours' => $existingUser->normal_hours,
                'nightshift' => $existingUser->nightshift,
                'nightshift_only' => $existingUser->nightshift_only,
                'other_shift' => $existingUser->other_shift,
                'other_shift_only' => $existingUser->other_shift_only,
                'overtime' => $existingUser->overtime
            ];
            //old code
            // $workprefsArray = [
            //     'workprefs_array' => [
            //         'location' => [
            //             'workplace' => $existingUser->workplace,
            //             'remote' => $existingUser->remote,
            //         ],
            //         'days' => [
            //             'workdays' => $existingUser->workdays,
            //             'saturday' => $existingUser->saturday,
            //             'sunday' => $existingUser->sunday,
            //             'bank_holidays' => $existingUser->bank_holidays,
            //             'sat_sun_bh_only' => $existingUser->sat_sun_bh_only,
            //         ],
            //         'hours' => [
            //             'normal_hours' => $existingUser->normal_hours,
            //             'nightshift' => $existingUser->nightshift,
            //             'nightshift_only' => $existingUser->nightshift_only,
            //             'other_shift' => $existingUser->other_shift,
            //             'other_shift_only' => $existingUser->other_shift_only,
            //         ],
            //         'overtime' => [
            //             'overtime' => $existingUser->Overtime
            //         ]
            //     ]
            // ];
            return $workprefsArray;
        }
    }

    public  function storeWorkPrefChanges($request)
    {

        // eliminate requests that don't make sense
        // workplace settings
        $dpw = $request['workplace'];
        $dpr = $request['remote'];
        $code1 = $dpw . $dpr;
        if ($code1 == "11" || $code1 == "00") {
            return 'this setup is not permitted';
        }

        // workday settings
        $du1 = $request['workdays'] ? 1 : 0;
        $du2 = $request['saturday'] ? 1 : 0;
        $du3 = $request['sunday'] ? 1 : 0;
        $du4 = $request['bank_holidays'] ? 1 : 0;
        $du5 = $request['sat_sun_bh_only'] ? 1 : 0;

        $code2 = $du1 . $du2 . $du3 . $du4 . $du5;

        if (!in_array($code2, $this->dayCases)) {
            return 'this setup is not permitted';
        }

        // workhour settings
        if ($request['nightshift_only'] == 1) {
            $request['nightshift'] = 1;
        }
        if ($request['other_shift_only'] == 1) {
            $request['other_shift'] = 1;
        }
        // build above setup from current database values
        $hu1 = $request['normal_hours'] ? 1 : 0;
        $hu2 = $request['nightshift'] ? 1 : 0;
        $hu3 = $request['nightshift_only'] ? 1 : 0;
        $hu4 = $request['other_shift'] ? 1 : 0;
        $hu5 = $request['other_shift_only'] ? 1 : 0;

        $code3 = $hu1 . $hu2 . $hu3 . $hu4 . $hu5;

        if (!in_array($code3, $this->hourCases)) {
            return 'this setup is not permitted';
        }

        if ($this->person->update([
            'workplace' => $request['workplace'],
            'remote' => $request['remote'],
            'workdays' => $request['workdays'],
            'saturday' => $request['saturday'],
            'sunday' => $request['sunday'],
            'bank_holidays' => $request['bank_holidays'],
            'sat_sun_bh_only' => $request['sat_sun_bh_only'],
            'normal_hours' => $request['normal_hours'],
            'nightshift' => $request['nightshift'],
            'nightshift_only' => $request['nightshift_only'],
            'other_shift' => $request['other_shift'],
            'other_shift_only' => $request['other_shift_only'],
            'overtime' => $request['overtime'],
        ]))
            return $this->person;
    }
}
